schema
mongoDB schema 
user-	1:username
	2:email
	3:password
	4:gender

workout-
	1:nameofexercise
	2:body_part
	3:numofExcercise
	4:sets
	5:reps
	6:weight

db.js explanation
firstly imported mongoose for idk 
imported dotenv for secret token and uri 
dotenv.config()idk

then const connectDB value assign kri hai usme async function use kia uske andar try lagaya why cuz baad mein await use kr paye taki jo database hai usko aane mein time lagta hai isliye async await use hota hai toh try ke andar ek aur const declare kia usme await karaya mongoose.connect ko fir woh process.env.URI walah samaj nhi aaya and then woh newuriparser and topology woh bhi samaj nhi aaya kyu lagaaya hai fir consolelog kr dia connected ke liye aur fir catch lagaya agar error aaya toh nhi connect ka log kia fir last mein export default connect db mein sirf woh connectDB wala function export kia taki idk which file mein import kar paye

server.js
isme import karaya express idk y
dotenv personal details ke liye 
connectDB wala function db file mein se 
dot.env config samaj nhi aaya kyu kia 

constapp = express() ye shayad express ka function banaya idk why 
aur fir middleware wala bhi samaj nhi aaya 
last mein listen kia server ko uska port wgera log krwaya haina 

workout.js 
isme bas workout structure kia hai 
(schema later daal dunga)


[‚úÖ Step 1] Project folder, env, dependencies setup
[‚úÖ Step 2] MongoDB connection
[‚úÖ Step 3] Express server setup
[‚úÖ Step 4] User schema created
[‚úÖ Step 5] Register route connected
[üîÑ Step 6] Implement registerUser logic
[‚è≥ Step 7] Create loginUser



postman user credentials
{
  "username": "pratham",
  "email": "pratham@gmail.com",
  "password": "12345678",
  "gender": "male"
}

register logic done and login logic done



JWT middleware file (baad mein logic wgera likh lunga)

seed/exercises.js
we will construct a new schema of pre existing exercises like 
 pushup schema {
	type: string
	description:string
	category: string;
	musclegroup: string;
} 
same with pull ups and squats
but I get It its like the exercise schema we used in models/exercise schema
in that user will also write its exercise itself 
and if we have to provide him/her the pre existing exercise fir toh bhot sari exercise hai jo pre existing hai toh isliye mujhe seeding ka samaj nhi aaya
SEEDING - just to provide a new user some pre existing data like a drop down 
now ill build the exercise.js
done
seeder.js
done ill explain it later
now exerciseRoutes.js file in routes
to show the existing exercises for users

summary so far
üë§ User Authentication
‚úÖ Register Route

Validates input

Hashes password

Creates user in MongoDB

Generates and returns JWT token

‚úÖ Login Route

Validates email & password

Compares hashed password

Returns JWT token on success

üîê Protected Routes
Created verifyToken.js middleware

Protected routes only accessible with valid JWT token

üèãÔ∏è Exercises
Created Exercise schema

Made seed/exercises.js with predefined exercises

Built a seeder.js script to insert them into MongoDB

Tested in Postman ‚Üí working perfectly

üß† Workout Schema (In Progress)
Created schema linking User + Exercise

Used ObjectId refs for proper relations

Structuring ready for adding workouts later

üåê GitHub Setup
Repo created and pushed successfully ‚úÖ

.env is ignored (‚úÖ)

Files are structured cleanly on GitHub


now made a workoutroutes.js crud operations

now moving to controllerworkout.js (logic)
workout data extract krenge req.body ke through
userID from token 
validate krenge required data 
construct krenge aur save krnege workout ko
then return the response

token (expires in 7d)
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4NTY1NjkwNzBhZDFjNjA1ZDhiYzY3OCIsImlhdCI6MTc1MDU2NzcwNSwiZXhwIjoxNzUwNTcxMzA1fQ.nQNsCk1LDq3chF8AIcKE0eMY1ir2WSQZmO0n3x4vy-k

created the workout in postman
http://localhost:5000/api/workouts

          controllers/workoutController.js
work to do in here
 
only logged in user can access
its should return only their own workouts 
each workout includes the exercises date and notes

basic logic
extract the user.id from JWT token req.user.id
query of workout model 
sort the workouts by the date or creation time
u can also show exercise names 

so in this folder later now CRUD operations 
get workout by id
update workout
and delete it
logic basically
getworkout method get
logic
extract id from req.params 
use workout.findbyid to fetch the workout
not found return 404
return workout return 404


update workout method put
logic 
Get id from req.params, get fields from req.body.

Use Workout.findByIdAndUpdate(id, updatedData, { new: true })

Return updated workout.

delete workout method delete
logic
Extract id from req.params.

Use Workout.findByIdAndDelete(id)

Return success message.

